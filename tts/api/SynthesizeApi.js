/**
 * TTS documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.1.73
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CloseTransactionResponse', 'model/ExceptionModel', 'model/SynthesizeLanguage', 'model/SynthesizeRequest', 'model/SynthesizeResponse', 'model/SynthesizeSessionlessRequest', 'model/SynthesizeVoiceType', 'model/WebSocketServerConfiguration', 'model/WebSocketSynthesizeRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CloseTransactionResponse'), require('../model/ExceptionModel'), require('../model/SynthesizeLanguage'), require('../model/SynthesizeRequest'), require('../model/SynthesizeResponse'), require('../model/SynthesizeSessionlessRequest'), require('../model/SynthesizeVoiceType'), require('../model/WebSocketServerConfiguration'), require('../model/WebSocketSynthesizeRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.TtsDocumentation) {
      root.TtsDocumentation = {};
    }
    root.TtsDocumentation.SynthesizeApi = factory(root.TtsDocumentation.ApiClient, root.TtsDocumentation.CloseTransactionResponse, root.TtsDocumentation.ExceptionModel, root.TtsDocumentation.SynthesizeLanguage, root.TtsDocumentation.SynthesizeRequest, root.TtsDocumentation.SynthesizeResponse, root.TtsDocumentation.SynthesizeSessionlessRequest, root.TtsDocumentation.SynthesizeVoiceType, root.TtsDocumentation.WebSocketServerConfiguration, root.TtsDocumentation.WebSocketSynthesizeRequest);
  }
}(this, function(ApiClient, CloseTransactionResponse, ExceptionModel, SynthesizeLanguage, SynthesizeRequest, SynthesizeResponse, SynthesizeSessionlessRequest, SynthesizeVoiceType, WebSocketServerConfiguration, WebSocketSynthesizeRequest) {
  'use strict';

  /**
   * V1 service.
   * @module api/SynthesizeApi
   * @version 3.1.73
   */

  /**
   * Constructs a new SynthesizeApi.
   * @alias module:api/SynthesizeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the languageVoicesSupport operation.
     * @callback module:api/SynthesizeApi~languageVoicesSupportCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SynthesizeLanguage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available languages
     * 
     * @param {String} xSessionId Session identifier
     * @param {module:api/SynthesizeApi~languageVoicesSupportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SynthesizeLanguage>}
     */
    this.languageVoicesSupport = function(xSessionId, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionId' is set
      if (xSessionId === undefined || xSessionId === null) {
        throw new Error("Missing the required parameter 'xSessionId' when calling languageVoicesSupport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-Id': xSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [SynthesizeLanguage];

      return this.apiClient.callApi(
        '/v1/languages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the synthesize operation.
     * @callback module:api/SynthesizeApi~synthesizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SynthesizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Synthesize speech from text
     * 
     * @param {String} xSessionId Session identifier
     * @param {module:model/SynthesizeRequest} body Synthesize param
     * @param {module:api/SynthesizeApi~synthesizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SynthesizeResponse}
     */
    this.synthesize = function(xSessionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'xSessionId' is set
      if (xSessionId === undefined || xSessionId === null) {
        throw new Error("Missing the required parameter 'xSessionId' when calling synthesize");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling synthesize");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-Id': xSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = SynthesizeResponse;

      return this.apiClient.callApi(
        '/v1/synthesize', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the synthesizeSessionless operation.
     * @callback module:api/SynthesizeApi~synthesizeSessionlessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SynthesizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Synthesize speech from text without session
     * 
     * @param {module:model/SynthesizeSessionlessRequest} body Synthesize param
     * @param {module:api/SynthesizeApi~synthesizeSessionlessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SynthesizeResponse}
     */
    this.synthesizeSessionless = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling synthesizeSessionless");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = SynthesizeResponse;

      return this.apiClient.callApi(
        '/v1/synthesize/sessionless', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the voices operation.
     * @callback module:api/SynthesizeApi~voicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SynthesizeVoiceType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available languages
     * 
     * @param {String} xSessionId Session identifier
     * @param {String} language Language name
     * @param {module:api/SynthesizeApi~voicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SynthesizeVoiceType>}
     */
    this.voices = function(xSessionId, language, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionId' is set
      if (xSessionId === undefined || xSessionId === null) {
        throw new Error("Missing the required parameter 'xSessionId' when calling voices");
      }

      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling voices");
      }


      var pathParams = {
        'language': language
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-Id': xSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [SynthesizeVoiceType];

      return this.apiClient.callApi(
        '/v1/languages/{language}/voices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webSocketStream operation.
     * @callback module:api/SynthesizeApi~webSocketStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebSocketServerConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get websocket connection param
     * 
     * @param {String} xSessionId Session identifier
     * @param {module:model/WebSocketSynthesizeRequest} body Synthesize param
     * @param {module:api/SynthesizeApi~webSocketStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebSocketServerConfiguration}
     */
    this.webSocketStream = function(xSessionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'xSessionId' is set
      if (xSessionId === undefined || xSessionId === null) {
        throw new Error("Missing the required parameter 'xSessionId' when calling webSocketStream");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling webSocketStream");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-Id': xSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = WebSocketServerConfiguration;

      return this.apiClient.callApi(
        '/v1/synthesize/stream', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webSocketStream_0 operation.
     * @callback module:api/SynthesizeApi~webSocketStream_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CloseTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close transaction
     * 
     * @param {String} xSessionId Session identifier
     * @param {String} xTransactionId Transaction Id
     * @param {module:api/SynthesizeApi~webSocketStream_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloseTransactionResponse}
     */
    this.closeWebSocketStream = function(xSessionId, xTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionId' is set
      if (xSessionId === undefined || xSessionId === null) {
        throw new Error("Missing the required parameter 'xSessionId' when calling webSocketStream_0");
      }

      // verify the required parameter 'xTransactionId' is set
      if (xTransactionId === undefined || xTransactionId === null) {
        throw new Error("Missing the required parameter 'xTransactionId' when calling webSocketStream_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-Id': xSessionId,
        'X-Transaction-Id': xTransactionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CloseTransactionResponse;

      return this.apiClient.callApi(
        '/v1/synthesize/stream', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
