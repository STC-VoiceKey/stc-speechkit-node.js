/**
 * Diarization documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthRequestDto', 'model/AuthResponseDto', 'model/AuthStatusDto', 'model/DomainDto', 'model/MessageDto', 'model/ModuleNamesDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthRequestDto'), require('../model/AuthResponseDto'), require('../model/AuthStatusDto'), require('../model/DomainDto'), require('../model/MessageDto'), require('../model/ModuleNamesDto'));
  } else {
    // Browser globals (root is window)
    if (!root.DiarizationDocumentation) {
      root.DiarizationDocumentation = {};
    }
    root.DiarizationDocumentation.SessionApi = factory(root.DiarizationDocumentation.ApiClient, root.DiarizationDocumentation.AuthRequestDto, root.DiarizationDocumentation.AuthResponseDto, root.DiarizationDocumentation.AuthStatusDto, root.DiarizationDocumentation.DomainDto, root.DiarizationDocumentation.MessageDto, root.DiarizationDocumentation.ModuleNamesDto);
  }
}(this, function(ApiClient, AuthRequestDto, AuthResponseDto, AuthStatusDto, DomainDto, MessageDto, ModuleNamesDto) {
  'use strict';

  /**
   * Session service.
   * @module api/SessionApi
   * @version 1.1.0
   */

  /**
   * Constructs a new SessionApi. 
   * @alias module:api/SessionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the check operation.
     * @callback module:api/SessionApi~checkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthStatusDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check session state
     * 
     * @param {String} xSessionID Session identifier
     * @param {module:api/SessionApi~checkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthStatusDto}
     */
    this.check = function(xSessionID, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling check");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = AuthStatusDto;

      return this.apiClient.callApi(
        '/vksession/rest/session', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomains operation.
     * @callback module:api/SessionApi~getDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All domains for auth without session
     * 
     * @param {module:api/SessionApi~getDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainDto}
     */
    this.getDomains = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = DomainDto;

      return this.apiClient.callApi(
        '/vksession/rest/domains', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGrantedPrivileges operation.
     * @callback module:api/SessionApi~getGrantedPrivilegesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user privileges
     * 
     * @param {String} xSessionID Session identifier
     * @param {module:model/ModuleNamesDto} body Module names
     * @param {module:api/SessionApi~getGrantedPrivilegesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.getGrantedPrivileges = function(xSessionID, body, callback) {
      var postBody = body;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling getGrantedPrivileges");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getGrantedPrivileges");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/vksession/rest/privileges', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/SessionApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in to system and obtain session identifier. Pass sessionId in &#39;X-Session-ID&#39; header in all other API requests
     * 
     * @param {module:model/AuthRequestDto} credentials User&#39;s credentials
     * @param {module:api/SessionApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthResponseDto}
     */
    this.login = function(credentials, callback) {
      var postBody = credentials;

      // verify the required parameter 'credentials' is set
      if (credentials === undefined || credentials === null) {
        throw new Error("Missing the required parameter 'credentials' when calling login");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = AuthResponseDto;

      return this.apiClient.callApi(
        '/vksession/rest/session', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/SessionApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log out of system
     * 
     * @param {String} xSessionID Session identifier
     * @param {module:api/SessionApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.logout = function(xSessionID, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling logout");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = null;

      return this.apiClient.callApi(
        '/vksession/rest/session', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
