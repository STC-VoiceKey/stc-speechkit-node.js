/**
 * ASR documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.dev
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ExceptionDto', 'model/PackageDto', 'model/StatusDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ExceptionDto'), require('../model/PackageDto'), require('../model/StatusDto'));
  } else {
    // Browser globals (root is window)
    if (!root.AsrDocumentation) {
      root.AsrDocumentation = {};
    }
    root.AsrDocumentation.PackagesApi = factory(root.AsrDocumentation.ApiClient, root.AsrDocumentation.ExceptionDto, root.AsrDocumentation.PackageDto, root.AsrDocumentation.StatusDto);
  }
}(this, function(ApiClient, ExceptionDto, PackageDto, StatusDto) {
  'use strict';

  /**
   * Packages service.
   * @module api/PackagesApi
   * @version 1.0.dev
   */

  /**
   * Constructs a new PackagesApi. 
   * @alias module:api/PackagesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAvailablePackages operation.
     * @callback module:api/PackagesApi~getAvailablePackagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackageDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available packages
     * 
     * @param {String} xSessionID Session identifier
     * @param {module:api/PackagesApi~getAvailablePackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PackageDto>}
     */
    this.getAvailablePackages = function(xSessionID, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling getAvailablePackages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [PackageDto];

      return this.apiClient.callApi(
        '/v1/packages/available', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the load operation.
     * @callback module:api/PackagesApi~loadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load package
     * 
     * @param {String} xSessionID Session identifier
     * @param {String} packageId Package name
     * @param {module:api/PackagesApi~loadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusDto}
     */
    this.load = function(xSessionID, packageId, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling load");
      }

      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling load");
      }


      var pathParams = {
        'packageId': packageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StatusDto;

      return this.apiClient.callApi(
        '/v1/packages/{packageId}/load', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unload operation.
     * @callback module:api/PackagesApi~unloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unload package
     * 
     * @param {String} xSessionID Session identifier
     * @param {String} packageId Package name
     * @param {module:api/PackagesApi~unloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusDto}
     */
    this.unload = function(xSessionID, packageId, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling unload");
      }

      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling unload");
      }


      var pathParams = {
        'packageId': packageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StatusDto;

      return this.apiClient.callApi(
        '/v1/packages/{packageId}/unload', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
