/**
 * SessionService documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.2.158
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthRequestDto', 'model/AuthResponseDto', 'model/AuthStatusDto', 'model/DomainDto', 'model/MessageDto',
      'model/ModuleNamesDto', 'model/PackageDto', 'model/AudioFileDto', 'model/RecognitionRequestDto', 'model/ASRResultDto',
    'model/WordDto', 'model/AdvancedRecognitionRequestDto', 'model/ASRAdvancedResultDto', 'model/StreamRequestDto',
    'model/StreamResponseDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthRequestDto'),
        require('../model/AuthResponseDto'), require('../model/AuthStatusDto'), require('../model/DomainDto'),
        require('../model/MessageDto'), require('../model/ModuleNamesDto'), require('../model/PackageDto'),
        require('../model/StatusDto'), require('../model/AudioFileDto'), require('../model/RecognitionRequestDto',
            require('../model/ASRResultDto'), require('../model/WordDto'), require('../model/AdvancedRecognitionRequestDto'),
            require('../model/ASRAdvancedResultDto'), require('../model/StreamResponseDto'), require('../model/StreamRequestDto')));
  } else {
    // Browser globals (root is window)
    if (!root.SessionServiceDocumentation) {
      root.SessionServiceDocumentation = {};
    }
    root.SessionServiceDocumentation.ASRClient = factory(root.SessionServiceDocumentation.ApiClient,
        root.SessionServiceDocumentation.AuthRequestDto, root.SessionServiceDocumentation.AuthResponseDto,
        root.SessionServiceDocumentation.AuthStatusDto, root.SessionServiceDocumentation.DomainDto,
        root.SessionServiceDocumentation.MessageDto, root.SessionServiceDocumentation.ModuleNamesDto,
        root.SessionServiceDocumentation.PackageDto, root.SessionServiceDocumentation.StatusDto,
        root.SessionServiceDocumentation.AudioFileDto, root.SessionServiceDocumentation.RecognitionRequestDto,
        root.SessionServiceDocumentation.ASRResultDto, root.SessionServiceDocumentation.WordDto,
        root.SessionServiceDocumentation.AdvancedRecognitionRequestDto, root.SessionServiceDocumentation.ASRAdvancedResultDto,
        root.SessionServiceDocumentation.StreamRequestDto, root.SessionServiceDocumentation.StreamResponseDto);
  }
}(this, function(ApiClient, AuthRequestDto, AuthResponseDto, AuthStatusDto, DomainDto, MessageDto, ModuleNamesDto,
                 PackageDto, StatusDto, AudioFileDto, RecognitionRequestDto, ASRResultDto, WordDto,
                 AdvancedRecognitionRequestDto, ASRAdvancedResultDto, StreamRequestDto, StreamResponseDto) {
  'use strict';

  /**
   * Session service.
   * @module api/ASRClient
   * @version 3.2.158
   */

  /**
   * Constructs a new ASRClient. 
   * @alias module:api/ASRClient
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the check operation.
     * @callback module:api/ASRClient~checkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthStatusDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check session state
     * 
     * @param {String} xSessionID Session identifier
     * @param {module:api/ASRClient~checkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthStatusDto}
     */
    this.check = function(xSessionID, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling check");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = AuthStatusDto;

      return this.apiClient.callApi(
        '/vksession/rest/session', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomains operation.
     * @callback module:api/ASRClient~getDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All domains for auth without session
     * 
     * @param {module:api/ASRClient~getDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainDto}
     */
    this.getDomains = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = DomainDto;

      return this.apiClient.callApi(
        '/vksession/rest/domains', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGrantedPrivileges operation.
     * @callback module:api/ASRClient~getGrantedPrivilegesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user privileges
     * 
     * @param {String} xSessionID Session identifier
     * @param {module:model/ModuleNamesDto} body Module names
     * @param {module:api/ASRClient~getGrantedPrivilegesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.getGrantedPrivileges = function(xSessionID, body, callback) {
      var postBody = body;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling getGrantedPrivileges");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getGrantedPrivileges");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/vksession/rest/privileges', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/ASRClient~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in to system and obtain session identifier. Pass sessionId in &#39;X-Session-ID&#39; header in all other API requests
     * 
     * @param {module:model/AuthRequestDto} credentials User&#39;s credentials
     * @param {module:api/ASRClient~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthResponseDto}
     */
    this.login = function(credentials, callback) {
      var postBody = credentials;

      // verify the required parameter 'credentials' is set
      if (credentials === undefined || credentials === null) {
        throw new Error("Missing the required parameter 'credentials' when calling login");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = AuthResponseDto;

      return this.apiClient.callApi(
        '/vksession/rest/session', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/ASRClient~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log out of system
     * 
     * @param {String} xSessionID Session identifier
     * @param {module:api/ASRClient~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.logout = function(xSessionID, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling logout");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = null;

      return this.apiClient.callApi(
        '/vksession/rest/session', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Get all available packages
     *
     * @param {String} xSessionID Session identifier
     * @param {module:api/PackagesApi~getAvailablePackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PackageDto>}
     */
    this.getAvailablePackages = function(xSessionID, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling getAvailablePackages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [PackageDto];

      return this.apiClient.callApi(
          '/vkasr/rest/v1/packages/available', 'GET',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the load operation.
     * @callback module:api/PackagesApi~loadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load package
     *
     * @param {String} xSessionID Session identifier
     * @param {String} packageId Package name
     * @param {module:api/PackagesApi~loadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusDto}
     */
    this.load = function(xSessionID, packageId, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling load");
      }

      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling load");
      }


      var pathParams = {
        'packageId': packageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StatusDto;

      return this.apiClient.callApi(
          '/vkasr/rest/v1/packages/{packageId}/load', 'GET',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unload operation.
     * @callback module:api/PackagesApi~unloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unload package
     *
     * @param {String} xSessionID Session identifier
     * @param {String} packageId Package name
     * @param {module:api/PackagesApi~unloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusDto}
     */
    this.unload = function(xSessionID, packageId, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling unload");
      }

      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling unload");
      }


      var pathParams = {
        'packageId': packageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StatusDto;

      return this.apiClient.callApi(
          '/vkasr/rest/v1/packages/{packageId}/unload', 'GET',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the close operation.
     * @callback module:api/RecognizeApi~closeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ASRResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close transaction
     *
     * @param {String} xSessionID Session identifier
     * @param {String} xTransactionId Session identifier
     * @param {module:api/RecognizeApi~closeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ASRResultDto}
     */
    this.close = function(xSessionID, xTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling close");
      }

      // verify the required parameter 'xTransactionId' is set
      if (xTransactionId === undefined || xTransactionId === null) {
        throw new Error("Missing the required parameter 'xTransactionId' when calling close");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID,
        'X-Transaction-Id': xTransactionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ASRResultDto;

      return this.apiClient.callApi(
          '/vkasr/rest/v1/recognize/stream', 'DELETE',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recognize operation.
     * @callback module:api/RecognizeApi~recognizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ASRResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get speech recognition result
     *
     * @param {String} xSessionID Session identifier
     * @param {module:model/RecognitionRequestDto} body Recognition request with audio file, mime type and package ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId Request identifier
     * @param {module:api/RecognizeApi~recognizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ASRResultDto}
     */
    this.recognize = function(xSessionID, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling recognize");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling recognize");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID,
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ASRResultDto;

      return this.apiClient.callApi(
          '/vkasr/rest/v1/recognize', 'POST',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recognizeAdvanced operation.
     * @callback module:api/RecognizeApi~recognizeAdvancedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ASRAdvancedResultDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recognize speech with advanced options
     *
     * @param {String} xSessionID Session identifier
     * @param {module:model/AdvancedRecognitionRequestDto} body Recognition request with audio file, mime type and package ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId Request identifier
     * @param {module:api/RecognizeApi~recognizeAdvancedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ASRAdvancedResultDto>}
     */
    this.recognizeAdvanced = function(xSessionID, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling recognizeAdvanced");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling recognizeAdvanced");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID,
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [ASRAdvancedResultDto];

      return this.apiClient.callApi(
          '/vkasr/rest/v1/recognize/advanced', 'POST',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recognizeSessionless operation.
     * @callback module:api/RecognizeApi~recognizeSessionlessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ASRResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get speech recognition result
     *
     * @param {module:model/SessionlessRecognitionRequestDto} body Request with user login data and recognition request
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId Request identifier
     * @param {module:api/RecognizeApi~recognizeSessionlessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ASRResultDto}
     */
    this.recognizeSessionless = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling recognizeSessionless");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ASRResultDto;

      return this.apiClient.callApi(
          '/vkasr/rest/v1/recognize/sessionless', 'POST',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recognizeWords operation.
     * @callback module:api/RecognizeApi~recognizeWordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WordDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recognize speech and return word list
     *
     * @param {String} xSessionID Session identifier
     * @param {module:model/RecognitionRequestDto} body Recognition request with audio file, mime type and package ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId Request identifier
     * @param {module:api/RecognizeApi~recognizeWordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WordDto>}
     */
    this.recognizeWords = function(xSessionID, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling recognizeWords");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling recognizeWords");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID,
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [WordDto];

      return this.apiClient.callApi(
          'vkasr/rest/v1/recognize/words', 'POST',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recognizeWordsSessionless operation.
     * @callback module:api/RecognizeApi~recognizeWordsSessionlessCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WordDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recognize speech without session and return word list
     *
     * @param {module:model/SessionlessRecognitionRequestDto} body Request with user login data and recognition request
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId Request identifier
     * @param {module:api/RecognizeApi~recognizeWordsSessionlessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WordDto>}
     */
    this.recognizeWordsSessionless = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling recognizeWordsSessionless");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [WordDto];

      return this.apiClient.callApi(
          'vkasr/rest/v1/recognize/sessionless/words', 'POST',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the start operation.
     * @callback module:api/RecognizeApi~startCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start recognition stream
     *
     * @param {String} xSessionID Session identifier
     * @param {module:model/StreamRequestDto} body Transaction parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.xRequestId Request identifier
     * @param {module:api/RecognizeApi~startCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamResponseDto}
     */
    this.start = function(xSessionID, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'xSessionID' is set
      if (xSessionID === undefined || xSessionID === null) {
        throw new Error("Missing the required parameter 'xSessionID' when calling start");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling start");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-Session-ID': xSessionID
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StreamResponseDto;

      return this.apiClient.callApi(
          '/vkasr/rest/v1/recognize/stream', 'POST',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
